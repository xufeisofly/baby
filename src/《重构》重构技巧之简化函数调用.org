#+BEGIN_QUOTE
1. 将“修改对象状态”的函数和“查询对象状态的函数”分开设计
2. 设计接口时，所有可以隐藏的数据都应该被隐藏起来
#+END_QUOTE

** Rename Method
   #+BEGIN_QUOTE
   给函数起一个好名字有一个办法：首先考虑应该给这个函数写上一句怎样的注释，然后想办法将注释变成函数名称
   #+END_QUOTE
   你的代码首先是为人写的，其次才是为计算机写的
   #+BEGIN_SRC ruby
   def old_method
     do_something
   end
   #+END_SRC
   可以先使用旧函数调用新函数
   #+BEGIN_SRC ruby
   def new_method
     do_something
   end

   def old_method
     new_method
   end
   #+END_SRC
   然后就可以慢慢的，逐一的找到旧函数并改名，最后将旧函数删掉
   
** Separate Query from Modifier
   #+BEGIN_QUOTE
   将查询函数和修改函数分离
   #+END_QUOTE
   #+BEGIN_QUOTE
   任何有返回值的函数，都不应该有副作用（副作用应该指除了查询之外的其他动作）。
   如果你遇到一个“既有返回值又有副作用”的函数，就应该试着将查询动作从修改动作中分割出来。
   #+END_QUOTE
   #+BEGIN_SRC ruby
   def find_thief
     thief = find_person(:thief)
     send_alert
     thief
   end

   def check_security
     thief = find_thief
     some_later_code(thief)
   end
   #+END_SRC
   find_thief看似是一个查询方法，返回一个thief，但里面却send_alert，应该将其拆出来
   #+BEGIN_SRC ruby
   def new_find_thief
     thief = find_person(:thief)
     thief
   end

   def find_thief
     thief = find_person(:thief)
     send_alert
     new_find_thief
   end

   def check_security
     find_thief
     thief = new_find_thief
     some_later_code(thief)
   end
   #+END_SRC
   最后，就可以更改find_thief了
   #+BEGIN_SRC ruby
   def find_thief
     send_alert
   end
   #+END_SRC
   #+BEGIN_QUOTE
   最后的最后，为find_thief改个名字可能更好一点
   #+END_QUOTE

** Preserve Whole Object
   #+BEGIN_QUOTE
   保持对象的完整性
   #+END_QUOTE
   #+BEGIN_SRC ruby
   method(deal.days, deal.priority) => method(deal)
   #+END_SRC
   动机：如果有一天method需要一个新的参数，就得全局搜method一一加上，不如直接放入一个对象，想要什么要什么
   副作用：函数所在的对象会依赖整个被调用的对象，如果会使得依赖结构恶化，就不应该这么使用。但是如果使用了该对象 \\
   过多的数据，说明这个方法应该放在那个类中

** Replace Parameters with Methods
   #+BEGIN_QUOTE
   以函数取代参数
   #+END_QUOTE
   #+BEGIN_SRC ruby
   level = get_level()
   my_method(level)
   #+END_SRC
   改为
   #+BEGIN_SRC ruby
   my_method()
   #+END_SRC
   动机：如果能减少一个参数，就减少一个参数，这个方法的另一个动力是减少临时变量。
   
** Introduce Parameter Object
   #+BEGIN_QUOTE
   引入参数对象，将若干个参数构建成为一个对象传入
   #+END_QUOTE
   不知道多少次看到代码用一对值表示一个范围，start end upper lower，可以创建一个Range对象
   #+BEGIN_SRC ruby
   Range = Struct.new(:start, :end)
   range = Range.new(start: start, end: end)

   method(range)
   #+END_SRC
   
** Replace Constructor with Factory Method
   #+BEGIN_QUOTE
   用工厂函数取代构造函数
   #+END_QUOTE
   动机：构造函数只能返回当前类的一个对象，工厂函数可以返回任何对象，比如返回子类的对象以取代类型码
   不过在ruby中很少见到啊
   #+BEGIN_SRC ruby
   class Person
     def initialize(type)
       @type = type
     end
   end
   #+END_SRC
   改为
   #+BEGIN_SRC ruby
   class Person
     def initialize(type)
       @type = type
     end
     
     def create(type)
       if type == 'teacher' then
         Teacher.new
       elsif type == 'worker' then
         Worker.new
       end
     end
   end
   #+END_SRC
   构造函数的好处就是可以在本类中返回子类的对象

** Replace Error Code with Exception
   #+BEGIN_QUOTE
   ruby里基本都是exception，很少再见到error code了，不过对于异常的分类还是可以学习一下
   #+END_QUOTE
**** 1. 非受控异常
     非受控异常指的是小概率的，不存在于程序正常逻辑中的异常，这种异常应该在出现之前就想办法尽量避免，比如
     #+BEGIN_SRC ruby
     model.save!
     #+END_SRC
     抛出的异常就属于非受控异常
**** 2. 受控异常
     受控异常一般是已知的有该可能性发生的错误，由于是大概率的，我们必须要rescue
     #+BEGIN_SRC ruby
     raise PhoneNumberException, '手机号不能为空' if phone.blank?

     def method
       # ...
     rescue PhoneNumberException => e
       # ...
     end
     #+END_SRC

** Replace Exception with Test
   #+BEGIN_QUOTE
   用测试取代异常
   #+END_QUOTE
   #+BEGIN_QUOTE
   Exceptions can be perceived as non-local GOTO statements. This can adversely affect the readability of your code and mislead team members as to the actual intent of your method
   #+END_QUOTE
   #+BEGIN_SRC ruby
   def method
     if phone.present?
       do_something
     else
       raise PhoneNumberException, '手机号不能为空'
     end
   end
   #+END_SRC
   应该改为
   #+BEGIN_SRC ruby
   def method
     if phone.present?
       do_something
     else
       return something
     end
   end
   #+END_SRC
   不要滥用Exception, 不要把异常当作条件语句，引入正常的工作流，应当使用return
   #+BEGIN_QUOTE
   “…exceptions should rarely be used as part of a program’s normal flow; exceptions should be reserved for unexpected events”
   #+END_QUOTE
   #+BEGIN_EXAMPLE
   不能这么用的原因如下：
   1. 异常不是用来干这个的。代码会让人迷惑，因为异常是一种错误，不是一种流控制
   2. 难以追踪。这么使用异常相当于使用goto语句，难以追踪
   3. 如果对于正常的情况都使用异常，那用什么来标识真正的异常？
   4. 异常性能太慢。有文章做过研究，raise或fail异常的性能会比其他低很多倍
   #+END_EXAMPLE
   还有一种情况我们经常会看到
   #+BEGIN_SRC ruby
   class BadController < ApplicationController
     def create
       some_object.save!
     rescue => e
       render json: { msg: e.message }, status: :unprocessable_entity
     end
   end
   #+END_SRC
   这里rescue了StandardError，造成的问题就是一些其他的Error可能也会被rescue导致我们无法发现
   （但这里经常用的一个原因是，我不知道会发生什么error，所以我想在页面上看看，就都rescue了）
   所以更好的一种方式是，指定你想rescue的error
   #+BEGIN_SRC ruby
   class BetterController < ApplicationController
     def create
       some_object.save!
     rescue ActiveRecord::RecordInvalid => e
       render json: { msg: e.message }, status: :unprocessable_entity
     end
   end
   #+END_SRC
   但这样还是有个问题
   #+BEGIN_QUOTE
   The code above is not intentional and should be considered a violation of the Principle of Least Astonishment. 
   Programmers read code a heck of a lot more than they write it so your code should be clear and intentional. Utilizing a conditional expressively states “I’m expecting this case to fail sometimes, and here’s how we handle it.”
   #+END_QUOTE
   说白了，就是这种错误是我很可能会发生的，所以是一种控制流，不要用异常处理
   #+BEGIN_SRC ruby
   class BestController < ApplicationController
     def create
       if some_object.save
         # do_something
       else
         render json: { msg: 'xxx' }, status: :unprocessable_entity
       end
     end
   end
   #+END_SRC
   相关文章：

   [[http://www.codinghell.ch/blog/2013/03/31/how-and-when-not-to-use-exceptions/][How and When (Not) to Use Exceptions]]

   [[http://launchware.com/articles/catch-all-exception-handling-is-not-flow-control][Catch All Exception Handling Is Not Flow Control]]

   [[https://mensfeld.pl/2015/03/exceptions-should-not-be-expected-stop-using-them-for-control-flow-or-any-other-logic-handling-in-ruby/][Exceptions should not be expected – stop using them for control flow (or any other logic handling) in Ruby]]

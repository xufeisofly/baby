这本书最好的一点是通俗易懂，不是上来就整那么多让人恶心的代码，看完还都记不住
#+BEGIN_QUOTE
|--------------------------------+----------------------+----------------------------------------|
| 没有人能一次就写出最优雅的代码 | 因此重构必须实时进行 | 因此必须有健壮的，可信的，全覆盖的测试 |
|--------------------------------+----------------------+----------------------------------------|
#+END_QUOTE
** 什么时候重构
#+BEGIN_QUOTE
“重构绝不是为了重构而重构”，这句话是什么意思，好像是说不要特意去重构一些代码，否则会被那些进度控的产品经理活埋。
作者更倾向于在做新功能的时候，看到不爽的代码顺手改之，或者，在阅读别人代码的时候，通过尝试重构的方式去了解这部分设计，从而一举两得。
#+END_QUOTE

** 什么地方重构
*** 重复代码
    方法基本就是提取出来重复的部分，放到一个何时的地方，大家一起调用

*** 过长的函数
    小函数会造成函数变多，这时候需要起个好名字
    #+BEGIN_QUOTE
    关键不在于函数的长度，而在于函数“做什么”和“如何做”之间的语义距离
    #+END_QUOTE
    如果函数有很多参数和临时变量，会加大拆解的难度，这个时候可以用下面几种方法：
  
**** Replace Temp with query
     去掉临时变量，虽然有时候会重复执行函数，影响性能，但值得
 
**** Introduce Parameter Object
     将特定组合的参数封装成一个对象，如
     #+BEGIN_SRC ruby
     method(start_date, end_date) => method(date_range)
     #+END_SRC
     date_range是一个对象

**** Preserve Whole Object

     保持对象完整，如果参数只是某个对象的几个属性，可以改为传递整个对象
     #+BEGIN_SRC ruby
     method(deal.destination, deal.days) => method(deal)
     #+END_SRC

*** 过长的参数
    如果参数列可以属于一个对象，可以将同一个对象的参数收集起来，将对象本身传进去

*** 不同方向的变化
    针对某一个外界的变化的所有相应修改，都应该只发生在单一的类中，而这个新类的所有内容都应该反应此变化
    #+BEGIN_QUOTE
    具体怎么实现不知道，姑且先记下这个标准吧
    #+END_QUOTE

*** 散弹式修改
    出现某种变化时，不得不在不同的类中进行修改。应该一些列的相关行为放到一个类中。
    #+BEGIN_QUOTE
    拿unicrm权限系统举例，应该在前端的权限key和后端的权限之间加一个translator类，这样在修改前端key名称或者增加新的权限时 \\
    就不用全局搜来搜去了
    #+END_QUOTE

*** 依恋情结
    - 某个函数从另一个对象那里调用了很多数据，那这个函数应该在另一个类里面。
    - 如果一个函数用到几个类的功能，那么哪个类拥有最多的被此函数调用的数据，这个函数就应该在那个类里面。

*** 使用对象封装参数和行为
    创造更多的小对象，对象可以打包参数，也可以打包参数和行为，我们可以把start_date和end_data就搞成 \\
    一个对象

*** switch语句
    #+BEGIN_QUOTE
    switch语句造成的问题是重复。可能要在不同的地方不断的加switch语句。
    实际上switch语句想要表达的意思是：不同的情况下有不同的行为。只要把这些行为封装到各自的类里，然后通过switch单纯的判断使用哪个对象就好了，这就是多态！
    #+END_QUOTE
    有两种处理方法：
**** 1. Replace Type Code with Subclasses
     #+BEGIN_QUOTE
     将类型码替换为可拥有多态行为的继承体系，以类型码的宿主类作为基类，然后针对每一种类型码创建子类
     不过有两种情况不能这么做：
     - 类型码的值在对象创建之后发生变化
     - 类型码的宿主类已经有了子类
     #+END_QUOTE

     #+BEGIN_SRC ruby
    class Person
      def initialize(blood_type)
        @blood_type = blood_type
      end

      def talk
        case @blood_type
        when :a
          balabala_a
        when :b
          balabala_b
        end
      end
    end
     #+END_SRC

     改成如下
     #+BEGIN_SRC ruby
    class Blood
      def initialize(type)
        @type = type
      end

      def instance
        case @type
        when :a
          BloodA.new
        when :b
          BloodB.new
        end
      end
    end

    class BloodA < Blood
      def balabala
      end
    end

    class BloodB < Blood
      def balabala
      end
    end

    class Person
      def initialize(blood_instance)
        @blood_instance = blood_instance
      end

      def talk
        @blood_instance.balabala
      end
    end
    
    blood_instance = Blood.new(:a).instance
    person = Person.new(blood_instance)
    person.talk
     #+END_SRC
     #+BEGIN_QUOTE
     这样的好处是，以后再有根据类型码区分的行为，就可以在BloodA和BloodB中增加了
     #+END_QUOTE
**** 2. Replace Type Code with State/Strategy
     #+BEGIN_QUOTE
     当宿主类不能被继承，或者类型码在生命周期中发生变化时，使用这种方法。
     本方法原理就是创建一个状态对象，即，将类型码对象化
     #+END_QUOTE
     #+BEGIN_EXAMPLE
     基本方法：
     1. 新建一个子类，根据类型码用途为它命名，这就是一个状态对象
     2. 为这个新类添加子类，每个子类对应一种类型码
     #+END_EXAMPLE

     还是刚才的例子，但我们假设这个person对象的血型是可以变的...明显不能用刚才的Person.new(blood_instance)
     #+BEGIN_SRC ruby
     class BloodType
       def initialize(type)
         @type = type
       end

       def new_type
         case @type
         when :a
           BloodA.new
         when :b
           BloodB.new
         end
       end
     end

     class BloodA < BloodType
       def type
         BloodType::A
       end

       def balabala
       end
     end

     class BloodB < BloodType
       def type
         BloodType::B
       end

       def balabala
       end
     end

     class Person
       def initialize(type)
         @type = type
       end

       def type
         @type
       end

       def type=(type)
         @type = BloodType.new(type).new_type
       end

       def talk
         @type.balabala
       end
     end

     person = Person.new(:a)
     person.talk
     #改变血型
     person.type = :b
     person.talk
     #+END_SRC

*** 没用的类
    #+BEGIN_QUOTE
    类的维护是要花钱的，如果某个类长时间没有做到足够的工作，就应该砍掉
    砍掉的方式有：
    - 合并到它的超类里
    - 将两个类合并成一个，如Telephone类的方法合并到Person中
    #+END_QUOTE

*** “未来性”的代码
    #+BEGIN_QUOTE
    总有一天要做某件事写出来的代码容易臭
    不要为了某个不切实际的边边角角的可能性，去复杂化设计
    #+END_QUOTE

*** 类之间过于复杂的引用关系
    #+BEGIN_QUOTE
    举个栗子，cure项目中表之间的关系，其实就是不同model对象的相互引用，如果引用关系过于复杂，\\
    只要一个对象发生变化，会改死你的。
    #+END_QUOTE
    #+BEGIN_QUOTE
    解决方法：hide delegate（隐藏这种委托关系）
    1. 减少这种关联
    2. 创建委托函数，隐藏这种委托关系
    #+END_QUOTE
    #+BEGIN_SRC ruby
    deal.customer.name
    #+END_SRC
    可以改为
    #+BEGIN_SRC ruby
    deal.customer_name

    def customer_name
      customer.name
    end
    #+END_SRC

    这样的好处是customer.name的实现原理对deal隐藏了，减少耦合，如果日后name字段迁移，则不用大面积修改

*** 不该继承的子类和超类
    #+BEGIN_QUOTE
    超类应该只持有子类共享的东西。
    #+END_QUOTE
    如果超类中有些东西子类不愿意继承或者不适合继承，我们有两种做法：
    1. 将不愿意被继承的内容单独摘出去构建一个类
    2. 将继承改为委托
    下面为第二种方法举例
    #+BEGIN_SRC ruby
    class A
      def m_accepted
      end

      def m_refused
      end
    end

    class B < A
      # only need m_accepted
    end
    #+END_SRC

    应该将B改为这样
    #+BEGIN_SRC ruby
    class B
      def initialize(a_instance)
        @_a_instance = a_instance
      end

      def m_accepted
        @_a_instance.m_accepted
      end
    end
    #+END_SRC
    用一个方法则定义一个相应的委托方法，而不是使用继承
    #+BEGIN_QUOTE
    就像unicrm的deal和travel互相delegate一样，不能为了共用方法，就让Deal < Travel吧
    #+END_QUOTE
    
*** 过多的注释
    1. 先使用Extract Method
    2. 再使用Rename Method
    3. 不行再使用注释

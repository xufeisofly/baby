#+BEGIN_QUOTE
只摘出来一些不看书不容易知道的重构方法，像Extract Method那些就不说了
#+END_QUOTE

** 1. Replace Temp with Query
   将临时变量的表达式提取到一个方法中，从而去掉临时变量。
   临时变量的用处主要是对一些复杂的表达式做解释，但一般还是建议将表达式Extract Method出来, 只有当 \\
   表达式是拥有大量局部变量的算法时，Extract Method很难，才使用临时变量表示表达式
   临时变量的问题：
*** 它们只在函数里使用，因此会驱使你写出更长的函数
*** 局部变量会增大Extract Method的难度
*** 所谓的性能问题可以先不去管它，等真的出现性能问题再去优化    

** Split Temporary Variable
   #+BEGIN_QUOTE
   分解临时变量
   #+END_QUOTE
   只有当使用“循环变量”，如for循环，或者结果收集变量，如某个数组用于收集结果时，才可以将一个临时变量赋值多次

** Remove Assignments to Parameters
   #+BEGIN_QUOTE
   不要对参数赋值，因为降低了代码清晰度，混用了按值传递和按引用传递两种参数传递方式
   #+END_QUOTE
   #+BEGIN_SRC ruby
   def method(input)
     if a_condition
       input = 1
     else
       input = 2
     end
   end
   #+END_SRC
   应当给设置一个临时变量，比如result，给这个变量赋值

** Replace Method with Method Object
   #+BEGIN_QUOTE
   用函数对象取代函数
   本质上是：当临时变量过多，无法使用Extract Method的时候，可以新建一个类，把临时变量变成另一个类的全局变量
   #+END_QUOTE
   范例：只是一个简单的例子
   #+BEGIN_SRC ruby
   class A
     def method(arg1, arg2)
       temp1 = arg1 - arg2 + a_method
       temp2 = temp1 * 2 + arg1
       temp1 + temp2
     end 
 
     private 
     
     def a_method
     end
   end
   #+END_SRC
   这只是一个简单情况，但我想Extract Method还是有些困难，因为临时变量较多，所以可以创建一个Temp的类，然后这些局部变量都会变成这个类的实例变量
   #+BEGIN_SRC ruby
   class Temp
     def initialize(a_instance, arg1, arg2)
       @a_instance = a_instance
       @arg1 = arg1
       @arg2 = arg2
     end

     def compute
       @temp1 = @arg1 - @arg2 + @a_instance.a_method
       @temp2 = @temp1 * 2 + @arg1
       @temp1 + @temp2
     end
   end

   class A
     def method(arg1, arg2)
       Temp.new(self, arg1, arg2).compute
     end
   end
   #+END_SRC
   
   现在Temp类中之前的临时变量都变成全局变量了，就可以使用Extract Method
   #+BEGIN_SRC ruby
   class Temp
     #...
     def compute
       temp1_method + temp2_method
     end

     private

     def temp1_method
       @temp1 = @arg1 - @arg2 + @a_instance.a_method
     end

     def temp2_method
       @temp1 * 2 + @arg1
     end
   end
   #+END_SRC
   大概就是这个意思

** 

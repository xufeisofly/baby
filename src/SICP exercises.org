#+TITLE: SICP exercises
#+Html_head: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

** Exercise 1.1
   
   10
   12
   8
   3
   4
   a
   b
   19
   #f
   4
   16
   6
   6
   16

** Exercise 1.2

   #+begin_src scheme
     (/ (+ 
         5 4 
         (- 2 
            (- 3 
               (+ 6 
                  (/ 4 5))))) 
        (* 3 
           (- 6 2) 
           (- 2 7)))
   #+end_src

** Exercise 1.3

   #+begin_src scheme
     (define (sum_of_square x y) 
       (+ (* x x) (* y y)))

     (define (procedure a b c) 
       (cond ((or (< c a) (< c b)) (sum_of_square a b))
             ((or (< b a) (< b c)) (sum_of_square a c))
             ((or (< a b) (< a c)) (sum_of_square b c))))
   #+end_src

** Exercise 1.4

   if b > 0，return a + b, else return a - b, overall return a + abs(b)

** Exercise 1.5

   normal order:
   
   #+begin_src scheme
     (test x y)
     (if (= x 0) 0 y)
     (if (= 0 0) 0 (p))
     0
   #+end_src

   applicative order:
   
   #+begin_src scheme
     (test 0 (p))
     (test 0 (p))
     ...
   #+end_src

** Exercise 1.6

   use if:
   
   special form will not use applicative order to analize a procedure, thus clause in old if will not run unless predicate meets. 

   use new-if:
   
   use applicative order, sqrt-iter clause will be expanded, leading maximum recursion depth exceeded.

** Exercise 1.7

   because (good-enough?) is checked by absolute difference, small number might meet that in the very beginning.

   for large numbers, is might cause (improve guess x) equals (guess), thus trapping in infinite loop.

     #+begin_src scheme
     (define (abs x)
       (if (< x 0)
           (* -1 x)
           x))

     (define (square x)
       (* x x))

     (define (sqrt-iter guess old-guess x)
       (if (good-enough? guess old-guess x)
           guess
           (sqrt-iter (improve guess x) guess x)))

     (define (improve guess x)
       (average guess (/ x guess)))

     (define (average x y)
       (/ (+ x y) 2))

     (define (good-enough? guess old-guess x)
       (< (abs (- guess old-guess)) (* guess 0.001)))

     (define (sqrt x)
       (sqrt-iter 1.0 2.0 x))

     (define (new-if predicate then-clause else-clause)
       (if (predicate)
           then-clause
           else-clause))
     #+end_src

** Exercise 1.8

   #+begin_src scheme
     (define (cube-root x)
       (cube-root-iter 1.0 2.0 x))

     (define (cube-root-iter guess old-guess x)
       (if (good-enough? guess old-guess x)
           guess
           (cube-root-iter (improve guess x) guess x)))

     (define (improve guess x)
       (/ (+ (/ x
                (* guess guess))
             (* 2 guess))
          3))

     (define (good-enough? guess old-guess x)
       (< (abs (- guess
                  old-guess))
          (* guess 0.001)))

     (define (abs x)
       (if (< x 0)
           (* -1 x)
           x))

     (cube-root 27)

   #+end_src

** Exercise 1.9

   first is recursive, second is iterative.

** Exercise 1.10

   #+begin_src scheme
     (A 1 10)
     (A (- 1 1) (A 1 (- 10 1)))
     (A 0 (A (- 1 1) (A 1 8)))
     (A 0 (A 0 (A 1 8)))
     (A 0 (A 0 (A 0 (A 1 7))))
     (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
     ...
     1024

     (A 2 4)
     (A 1 (A 2 3))
     (A 1 (A 1 (A 2 2)))
     (A 1 (A 1 (A 1 (A 2 1))))
     (A 1 (A 1 (A 1 2)))
     (A 1 (A 1 (A 0 (A 1 1))))
     (A 1 (A 1 (A 0 2)))
     (A 1 (A 1 4))
     (A 1 (A 0 (A 1 3)))
     (A 1 (A 0 (A 0 (A 1 2))))
     (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
     (A 1 (A 0 (A 0 (A 0 2))))
     (A 1 (A 0 (A 0 4)))
     (A 1 16)

     65536

     (A 3 3)
     (A 2 (A 3 2))
     ...
     (A 2 4)
     65536
   #+end_src

** Exercise 1.11

   recursive process

   #+begin_src scheme
     (define (f n)
       (if (< n 3)
           n
           (+ (f (- n 1))
              (* 2 (f (- n 2)))
              (* 3 (f (- n 3))))))
   #+end_src

   iterative process

   #+begin_src scheme
     (define (f n)
       (f-iter 2 1 0 n))

     (define (f-iter a b c count)
       (if (< count 3)
           a
           (f-iter (+ a
                      (* 2 b)
                      (* 3 c))
                   a
                   b
                   (- count 1))))
   #+end_src

** Exercise 1.12

   #+begin_src scheme
     (define (f r c)
       (if (and (> r 1)
                (not (eq? r c))
                (not (eq? c 0)))
           (+ (f (- r 1) (- c 1))
              (f (- r 1) c))
           1))
   #+end_src

** Exercise 1.16

   iterative process, even is faster than odd.

   #+begin_src scheme
     (define (even? n)
       (= (remainder n 2) 0))

     (define (square x)
       (* x x))

     (define (fast-expt b n)
       (if (even? n)
           (fast-expt-iter 1
                           (/ n 2)
                           (square b))
           (fast-expt-iter 1 n b)))

     (define (fast-expt-iter product count b)
       (if (= count 0)
           product
           (fast-expt-iter (* b product) (- count 1) b)))

     (fast-expt 2 3)

   #+end_src

** Exercise 1.17

   #+begin_src scheme
     (define (double a)
       (+ a a))

     (define (fast-* a n)
       (if (even? n)
           (fast-*-iter 0 (/ n 2) (double a))
           (fast-*-iter 0 n a)))

     (define (fast-*-iter product count a)
       (if (= count 0)
           product
           (fast-*-iter (+ product a) (- count 1) a)))

     (fast-* 3 3)
   #+end_src

** Exercise 1.21

   #+begin_src scheme
     (define (smallest-divisor n)
       (find-divisor-iter n 2))

     (define (find-divisor-iter n test-divisor)
       (cond ((> (square test-divisor) n) n)
             ((divides? n test-divisor) test-divisor)
             (else (find-divisor-iter n (+ test-divisor 1)))))

     (define (divides? n divisor)
       (= (remainder n divisor) 0))

     (smallest-divisor 199)
     (smallest-divisor 1999)
     (smallest-divisor 19999)
   #+end_src

   199 1999 7

** Exercise 1.22

   #+begin_src scheme
     (define (expmod base exp mod)
       (remainder (expt base exp)
                  mod))

     (define (expt base exp)
       (cond ((= exp 0) 1)
             (else (* base
                      (expt base (- exp 1))))))

     (define (try-it a n)
       (= (expmod a n n) a))

     (define (fermat-test a n)
       (cond ((= a 1) true)
             ((try-it a n) (fermat-test (- a 1) n))
             (else false)))

     (define (prime? n)
       (fermat-test (- n 1) n))

     (define (timed-prime-test n)
       (newline)
       (display n)
       (start-prime-test n (runtime)))

     (define (start-prime-test n start-time)
       (if (prime? n)
           (report-prime (- (runtime) start-time))))

     (define (report-prime elapsed-time)
       (display " *** ")
       (display elapsed-time))

     (define (even? n)
       (= (remainder n 2) 0))

     (define (search-for-primes min max)
       (timed-prime-test min)
       (cond ((< min max) (search-for-primes (+ 1 min) max))
             (else true)))


     (search-for-primes 1000 1100)

   #+end_src

** Exercise 1.26

   Reasoner's soluton has to run expmod twice, from linear recursion to tree recursion.

   Time grows exponentially with the depth of tree height, log(n), thus the execution turns to n.

** Exercise 1.29

   #+begin_src scheme
     (define (sum term a next b)
       (if (> a b)
           0
           (+ (term a)
              (sum term (next a) next b))))

     (define (incr n)
       (+ n 1))

     (define (sum-cubes a b)
       (sum cude a incr b))

     (define (even? n)
       (= 0 (remainder n 2)))

     (define (cube n)
       (* n n n))

     (define (simpson-rule f a b x n k)
       (define h
         (/ (- b a) n))

       (define (coin k)
         (cond ((or (= n k) (= 0 k)) 1)
               ((even? k) 2)
               (else 4)))

       (define (next m)
         (+ m h))

       (if (> x b)
           0
           (+ (* (coin k)
                 (/ h 3)
                 (f x))
              (simpson-rule f a b (next x) n (+ k 1)))))


     (simpson-rule cube 0 1 0 1000 0)
   #+end_src

   官方方法，外面包了一层，这样可以设置一些全局函数

   #+begin_src scheme
     (define (cube x) (* x x x))

     (define (sum term a next b)
       (if (> a b)
           0
           (+ (term a)
              (sum term (next a) next b))))

     (define (even? n)
       (= 0 (remainder n 2)))

     (define (simpson-integral f a b n)
       (define h (/ (- b a) n))
       (define (inc m) (+ m 1))
       (define (yk k) (f (+ a (* k h))))
       (define (simpson-term k)
         (* (yk k)
            (cond ((or (= k n) (= 0 k)) 1)
                  ((even? k) 2)
                  (else 4))))
       (* (/ h 3)
          (sum simpson-term 0 inc n)))

     (simpson-integral cube 0 1 100)
   #+end_src

** Exercise 1.30

   #+begin_src scheme
     (define (sum term a next b)
       (define (iter a result)
         (if (> a b)
             result
             (iter (next a) (+ result (term a)))))
       (iter a 0))
   #+end_src

** Exercise 1.31

*** a

    #+begin_src scheme
      (define (product term a next b conn)
        (if (> a b)
            1.0
            (conn (term a)
                  (product term (next a) next b conn))))

      (define (multiply a b)
        (* a b))

      (define (test-formula a b)
        (define (incr n)
          (+ n 1))
        (define (term k)
          (define num
            (* (floor (/ (+ k 2) 2))
               2))
          (define den
            (cond ((even? k) (- num 1))
                  (else (+ num 1))))
          (/ num den))

        (product term a incr b multiply))

      (* 4 (test-formula 1 100))
    #+end_src

*** b
    
    #+begin_src scheme
      (define (product term a next b conn)
        (define (iter a result)
          (if (> a b)
              result
              (iter (next a) (conn result (term a)))))
        (iter a 1.0))
    #+end_src
    
** Exercise 1.32

   same as 1.31 but replace 1.0 with null-value
    
** Exercise 1.34

   (2 2) Error: the object 2 is not applicable.
